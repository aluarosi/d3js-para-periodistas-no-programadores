{
  "name": "proxying-agent",
  "version": "0.1.6",
  "description": "Node HTTP/HTTPS Forward Proxy Agent",
  "keywords": [
    "http",
    "https",
    "agent",
    "proxy",
    "tunnel",
    "ntlm"
  ],
  "homepage": "https://github.com/capriza/node-proxying-agent/",
  "author": {
    "name": "Capriza Inc.",
    "email": "backend@capriza.com"
  },
  "maintainers": [
    {
      "name": "Nadav Fischer",
      "email": "nadav.fischer@capriza.com"
    }
  ],
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/capriza/node-proxying-agent.git"
  },
  "bugs": {
    "url": "https://github.com/capriza/node-proxying-agent/issues"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# Node HTTP/HTTPS Forward Proxy Agent\n\nThis a Node http agent capable of forward proxying HTTP/HTTPS requests.\n\nIt supports the following:\n* Connect to a proxy with either HTTP or HTTPS\n* Proxying to a remote server using SSL tunneling (via the http CONNECT method)\n* Authenticate with a proxy with Basic authentication\n* Authenticate with a proxy with NTLM authentication (beta)\n\nThe agent inherits directly from the ``http.Agent`` Node object so it benefits from all\nthe socket handling goodies that come with it.\n\n## Installation\n\n    npm install proxying-agent\n\n## Usage\n\nThe following options are supported:\n\n* ``proxy`` - Specifies the proxy url. The supported format is ``http[s]://[auth@]host:port`` where ``auth``\n    is the authentication information in the form of ``username:password``. The authentication information can also be\n    in the form of a Base64 encoded ``user:password``, e.g. ``http://dXNlcm5hbWU6cGFzc3dvcmQ=@proxy.example.com:8080``\n* ``tunnel`` - If ``true`` then the proxy will become a tunnel to the server.\n    This should usually be ``true`` only if the target server protocol is ``https``\n* ``tlsOptions`` - TLS connection options to use when the target server protocol is ``https``. See http://nodejs.org/api/tls.html#tls_tls_connect_options_callback for a list of available options.\n* ``authType`` - Proxy authentication type. Possible values are ``basic`` and ``ntlm`` (default is ``basic``).\n* ``ntlm`` - (beta) applicable only if ``authType`` is ``ntlm``. Supported fields:\n    * ``domain`` (required) - the NTLM domain\n    * ``workstation`` (optional) - the local machine hostname (os.hostname() is not specified)\n\n### HTTP Server\n\n```javascript\n  var proxying = require('proxying-agent');\n  var proxyingOptions = {\n    proxy: 'http://proxy.example.com:8080'\n  };\n  var proxyingAgent = new proxying.ProxyingAgent(proxyingOptions);\n  var req = http.request({\n    host: 'example.com',\n    port: 80,\n    agent: proxyingAgent\n  });\n```\n\n### HTTPS Server\n\n```javascript\n  var proxying = require('proxying-agent');\n  var proxyingOptions = {\n    proxy: 'http://proxy.example.com:8080',\n    tunnel: true\n  };\n  var proxyingAgent = new proxying.ProxyingAgent(proxyingOptions);\n  var req = https.request({\n    host: 'example.com',\n    port: 443,\n    agent: proxyingAgent\n  });\n```\n\n### Basic Authentication\n\n```javascript\n  var proxying = require('proxying-agent');\n  var proxyingOptions = {\n    proxy: 'http://username:password@proxy.example.com:8080',\n    tunnel: true\n  };\n  var proxyingAgent = new proxying.ProxyingAgent(proxyingOptions);\n  var req = https.request({\n    host: 'example.com',\n    port: 443,\n    agent: proxyingAgent\n  });\n```\n\n### NTLM Authentication\n\nWhen authenticating using NTLM it is important to delay sending the request data until the socket is assigned to the request.\nFailing to do so will result in the socket being prematurely closed, preventing the NTLM handshake from completing.\n\n```javascript\n  var proxying = require('proxying-agent');\n  var proxyingOptions = {\n    proxy: 'http://username:password@proxy.example.com:8080',\n    tunnel: true,\n    authType: 'ntlm',\n    ntlm: {\n      domain: 'MYDOMAIN'\n    }\n  };\n  var proxyingAgent = new proxying.ProxyingAgent(proxyingOptions);\n  var req = https.request({\n    host: 'example.com',\n    port: 443,\n    agent: proxyingAgent\n  });\n\n  req.on('socket', function(socket) {\n    req.write('DATA');\n    req.end();\n  });\n```\n\n## References\n\n* NTLM code was forked from https://github.com/SamDecrock/node-http-ntlm.git\n* NTLM Authentication Scheme for HTTP - http://www.innovation.ch/personal/ronald/ntlm.html\n\n## Copyright and License\n\nCopyright 2013-2014 Capriza. Code released under the [MIT license](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "_id": "proxying-agent@0.1.6",
  "_shasum": "838af62e2c7da64925f39b2583ac6515a5fa3b0e",
  "_from": "proxying-agent@0.1.6",
  "_resolved": "https://registry.npmjs.org/proxying-agent/-/proxying-agent-0.1.6.tgz"
}
