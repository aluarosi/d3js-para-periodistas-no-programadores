{
  "name": "precond",
  "description": "Precondition checking utilities.",
  "version": "0.2.3",
  "author": {
    "name": "Mathieu Turcotte",
    "email": "turcotte.mat@gmail.com"
  },
  "keywords": [
    "precondition",
    "assert",
    "invariant",
    "contract",
    "condition"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/MathieuTurcotte/node-precond.git"
  },
  "devDependencies": {
    "nodeunit": "0.9",
    "jshint": "2.5"
  },
  "scripts": {
    "pretest": "jshint lib/ examples/ index.js",
    "test": "nodeunit tests/"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "readme": "# Preconditions for Node.js\n[![Build Status](https://secure.travis-ci.org/MathieuTurcotte/node-precond.png?branch=master)](https://travis-ci.org/MathieuTurcotte/node-precond)\n[![NPM version](https://badge.fury.io/js/precond.png)](http://badge.fury.io/js/precond)\n\nPrecondition checks for Node.js inspired by [Guava's precondition checking\nutilities](https://code.google.com/p/guava-libraries/wiki/PreconditionsExplained).\n\n## Installation\n\n```\nnpm install precond\n```\n\n## Unit tests\n\n```\nnpm test\n```\n\n## Overview\n\nPrecond provides a set of functions to verify arguments and state correctness\n\nIt lets you rewrite constructs like the following\n\n```js\nif (!this.isConnected) {\n    throw new Error('Client should be connected before calling X.');\n}\n```\n\ninto a more compact and declarative check bellow.\n\n```js\nprecond.checkState(this.isConnected, 'Client should be ...');\n```\n\n**Note that even though the throw statement is wrapped in a function, the call\nstack will still start from the calling function. So the previous examples would\nboth produce the same stack trace.**\n\nAll arguments after the message will be used to format the actual error\nmessage that will be thrown.\n\nThe following precondition checks are provded:\n\n- checkArgument(value, [messageFormat, [formatArgs, ...]])\n- checkState(value, [messageFormat, [formatArgs, ...]])\n- checkIsDef(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsDefAndNotNull(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsString(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsArray(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsNumber(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsBoolean(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsFunction(value, [messageFormat, [formatArgs, ...]]) -> value\n- checkIsObject(value, [messageFormat, [formatArgs, ...]]) -> value\n\n## API\n\n### Static functions\n\n#### precond.checkArgument(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be truthy\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is true. Throws an `IllegalArgumentError` if value\nis false.\n\n#### precond.checkState(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be truthy\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is true. Throws an `IllegalStateError` if value\nis false.\n\n#### precond.checkIsDef(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be defined\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is defined (could be null). Throws an\n`IllegalArgumentError` if value is undefined. Returns the value of\nthe value that was validated.\n\n#### precond.checkIsDefAndNotNull(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be defined and not null\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is defined and not null. Throws an\n`IllegalArgumentError` if value is undefined or null. Returns the value of\nthe value that was validated.\n\n#### precond.checkIsString(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be a string\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is a string or a String object. Throws an\n`IllegalArgumentError` if value isn't a string. Returns the value of\nthe value that was validated.\n\n#### precond.checkIsArray(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be an array\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is an array. Throws an `IllegalArgumentError` if\nvalue isn't an array. Returns the value of the value that was\nvalidated.\n\n#### precond.checkIsNumber(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be a number\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is a number. Throws an `IllegalArgumentError` if\nvalue isn't a number. Returns the value of the value that was\nvalidated.\n\n#### precond.checkIsBoolean(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be a boolean\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is a boolean. Throws an `IllegalArgumentError` if\nvalue isn't a boolean. Returns the value of the value that was\nvalidated.\n\n#### precond.checkIsFunction(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be a function\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is a function. Throws an `IllegalArgumentError` if\nvalue isn't a function. Returns the value of the value that was\nvalidated.\n\n#### precond.checkIsObject(value, [messageFormat, [formatArgs, ...]])\n\n- value: the value that is required to be an object\n- messageFormat: error message format template\n- formatArgs: arguments to be substituted into the message template\n\nEnsures that value is an object. Throws an `IllegalArgumentError` if\nvalue isn't an object. Returns the value of the value that was\nvalidated.\n\n### Class precond.IllegalArgumentError\n\nExtends `Error` and is thrown to signal illegal arguments.\n\n### Class precond.IllegalStateError\n\nExtends `Error` and is thrown to signal that the program or object has reached\nan illegal state.\n\n## License\n\nThis code is free to use under the terms of the [MIT license](http://mturcotte.mit-license.org/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MathieuTurcotte/node-precond/issues"
  },
  "homepage": "https://github.com/MathieuTurcotte/node-precond",
  "_id": "precond@0.2.3",
  "_shasum": "aa9591bcaa24923f1e0f4849d240f47efc1075ac",
  "_from": "precond@0.2",
  "_resolved": "https://registry.npmjs.org/precond/-/precond-0.2.3.tgz"
}
